module prettygen;

import prettyops, std.random, std.fun;

int rand() { return prettyops.rand(); }

import std.time, std.png, std.thread;

string urlencode(string s) {
  return s
    .replace(`$`, "%24")
    .replace("&", "%26")
    .replace("+", "%2B")
    .replace(",", "%2C")
    .replace("/", "%2F")
    .replace(":", "%3A")
    .replace(";", "%3B")
    .replace("=", "%3D")
    .replace("?", "%3F")
    .replace("@", "%40")
    .replace("~", "%7E")
    .replace("%", "%25") // fuck you
  ;
}

import std.string;
import c.stdlib, c.poll, c.unistd;
string readback(string cmd, string data) {
  int x 2 hdl_sysward, hdl_selfward;
  pipe hdl_sysward; // self -> system()
  pipe hdl_selfward; // system() -> self
  "exec $(hdl_sysward[1])>&-; exec $(hdl_selfward[0])>&-; <&$(hdl_sysward[0]) $cmd >&$(hdl_selfward[1]) &"
    .toStringz().system();
  close hdl_sysward[0]; // read side
  close hdl_selfward[1]; // write side
  char[auto~] result;
  bool running = true;
  int fdslength = 2;
  while running {
    pollfd x 2 fds;
    fds[0].(fd, events) = (hdl_selfward[0], POLLIN);
    fds[1].(fd, events) = (hdl_sysward [1], POLLOUT);
    auto hits = poll(fds.ptr, fdslength, -1);
    if fds[0].revents & POLLHUP running = false;
    else {
      if fds[0].revents & POLLIN {
        char x 128 buf;
        auto size = read buf.(hdl_selfward[0], ptr, length);
        if (size > 0) {
          result ~= buf[0 .. size];
        }
      }
      if fds[1].revents & POLLOUT {
        auto res = write data.(hdl_sysward[1], ptr, length);
        if res < 0 {
          raise new Error "Write error";
        }
        data = data[res .. $];
        if !data.length { close hdl_sysward[1]; fdslength = 1; }
      }
    }
  }
  return result[];
}

import std.file, gd;
extern(C) char* getenv(char*);
extern(C) FILE* stdout, stderr;
void main() {
  delta = 0;
  set-handler(Error err) {
    writeln "Content-type: text/html";
    writeln "";
    writeln "<html><head><title>Error!</title></head><body><h2>An error has occurred! </h2><h3>$err</h3></body></html>";
    invoke-exit "main-return";
  }
  define-exit "main-return" {
    return;
  }
  bool opsInited;
  string queryString = CToString getenv toStringz "QUERY_STRING";
  string SERVER_NAME = CToString getenv toStringz "SERVER_NAME";
  string SERVER_PORT = CToString getenv toStringz "SERVER_PORT";
  string SCRIPT_NAME = CToString getenv toStringz "SCRIPT_NAME";
  Operator tree;
  int aa = 1, seed;
  (int, int) size = (512, 512);
  (int, int) depth;
  string treepath;
  int gifmode;
  bool hsv;
  void parseParams(string params) {
    int treeCost() {
      int recurse(Operator tree) {
        int res = 1;
        for auto ch <- tree.childs
          res += recurse ch;
        return res;
      }
      return recurse tree;
    }
    void initTree() {
      if (tree) return;
      if (!opsInited) {
        opsInited = true;
        initOps();
      }
      initRNG seed;
      int range1 = 4, range2 = 12;
      if (version_id >= 3) {
        range1 = 8;
      }
      do {
        depth[0] = 2 + rand() % range1;
        depth[1] = depth[0] + rand() % range2;
        tree = genTree(depth);
      } while (treeCost() > 256) { } // reject trees that are too expensive
    }
    if auto rest = params.startsWith "&" params = rest;
    auto parts = params.split "&";
    for auto part <- parts {
      if (auto rest = part.startsWith "seed=") seed = rest.atoi();
      else if (auto rest = part.startsWith "size=") {
        if (rest.find("x") != -1) {
          size = (rest.split("x")[0].atoi(), rest.split("x")[1].atoi());
        } else {
          size = (rest.atoi() x 2);
        }
      }
      else if (auto rest = part.startsWith "hq") aa = 6;
      else if (auto rest = part.startsWith "aa=") aa = rest.atoi();
      else if (auto rest = part.startsWith "gif=") gifmode = rest.atoi();
      else if (auto rest = part.startsWith "v=") version_id = rest.atoi();
      else if (auto rest = part.startsWith "treepath=") {
        if (!seed) raise new Error "Must define seed before treepath! ";
        initTree();
        (treepath, params) = rest.slice "&";
        string tp = treepath;
        while (tp.length) {
          (string step, tp) = tp.slice "-";
          tree = tree.childs[step.atoi()];
        }
      } else raise new Error "Unknown URL parameter: $part";
    }
    initTree();
    hsv = !!(rand() & 1);
  }
  string tree_graph() {
    int count;
    (Operator, string)[auto~] namemap;
    (string, string) recurse(Operator op, string treepath = "") {
      for auto entry <- refs namemap if int:(*entry)[0] == int:op return (string:null, (*entry)[1]);
      string nodename = "node_$(count++)";
      string res = "$nodename [label=\"$(op.name)\", fillcolor=\"#ffffff40\", style=filled]; \n";
      for (int i, Operator ch) <- zip(0..-1, op.childs) {
        auto chtup = recurse(ch, "$treepath$i-");
        res ~= chtup[0];
        res ~= "$nodename -> $(chtup[1]); \n";
      }
      namemap ~= (op, nodename);
      return (res, nodename);
    }
    string res = recurse tree #[0];
    return "Digraph G { bgcolor = transparent; rankdir = LR; $res }";
    
  }
  if (auto rest = queryString.startsWith "basegraph") {
    writeln "Content-type: image/png";
    writeln "";
    fflush(stdout);
    
    seed = delegate int() { long l = µsec(); return *int* :&l; }();
    
    parseParams rest;
    
    auto pngdata = readback("dot -Tpng ", tree_graph());
    using new writer {
      hdl = 1;
      step byte[]:pngdata;
      close;
    }
    return;
  }
  if (auto rest = queryString.startsWith "picture") {
    writeln "Content-type: text/html";
    writeln "";
    
    seed = delegate int() { long l = µsec(); return *int* :&l; }();
    
    parseParams rest;
    
    writeln "<html>
    <head>
    <title>Image with seed $seed</title>
    </head>
    <body>
    Seed: $seed, $(\\{if (hsv) return \"HSV\"; else return \"RGB\"; } #()) mode<br>
    <a href=\"?derivation$rest\">Derivation</a>&nbsp;
    <a href=\"?picture&hq$rest\">HQ</a>&nbsp;
    <a href=\"http://api.imgur.com/2/upload?url=$(\"http://$SERVER_NAME:$SERVER_PORT$SCRIPT_NAME?img$rest\".urlencode())\">Upload to imgur</a>
    <a href=\"http://api.imgur.com/2/upload?url=$(\"http://$SERVER_NAME:$SERVER_PORT$SCRIPT_NAME?img&hq$rest\".urlencode())\">(HQ)</a>
    <br />
    <img style=\"margin: 5px; border: solid 1px; \" src=\"?img$rest\" /><br>
    </body>
    </html>";
    return;
  }
  string tree_info(string rest) {
    auto positions = readback("dot -Tdot", tree_graph()).split("\n");
    (int, int) graphsize;
    {
      auto szstr = positions[3].between("bb=\"", "\"").split(",");
      graphsize[0] = szstr[2].atoi();
      graphsize[1] = szstr[3].atoi();
    }
    (int, int) lookupNodePosition(string nodename) {
      for auto line <- positions {
        line = line.strip();
        if (line.startsWith nodename) {
          auto pos-str = line.between("pos=\"", "\"");
          (string a, string b) = pos-str.slice ",";
          return (a.atoi(), b.atoi());
        }
      }
      raise new Error "Internal error: no such node: $nodename";
    }
    char[auto~] extra_info;
    int count;
    (Operator, string)[auto~] namemap;
    string recurse(Operator op, string treepath) {
      for auto entry <- refs namemap if int:(*entry)[0] == int:op return (*entry)[1];
      string nodename = "node_$(count++)";
      auto pos = lookupNodePosition nodename;
      string prefix;
      if (gifmode) prefix = "&gif=$gifmode";
      if (version_id) prefix = "$(prefix)&v=$version_id";
      extra_info ~= "
        <a href=\"?picture$rest&treepath=$treepath\">
        <img src=\"?img$prefix&seed=$seed&size=64&treepath=$treepath\" style=\"position: absolute; left: $(pos[0] - 20)pt; top: $(graphsize[1] - pos[1] - 20)pt; \" />
        </a>";
      for (int i, Operator ch) <- zip(0..-1, op.childs) {
        string chname = recurse(ch, "$treepath$i-");
      }
      namemap ~= (op, nodename);
      return nodename;
    }
    recurse (tree, treepath);
    string res = "
    <div style=\"position: relative; width: $(graphsize[0])pt; height: $(graphsize[1])pt; \">
    $(extra_info[])
    <img src=\"?basegraph$rest\" style=\"position: absolute; z-index: 1; border: 1px solid; pointer-events: none; \"/>
    </div>";
    return res;
  }
  if (auto rest = queryString.startsWith "derivation") {
    writeln "Content-type: text/html";
    writeln "";
    
    seed = delegate int() { long l = µsec(); return *int* :&l; }();
    
    parseParams rest;
    
    writeln "<html>
    <head>
    <title>Derivation of seed $seed</title>
    </head>
    <body>
    <a href=\"?picture$rest\">Back</a><br>
    $(tree_info(rest))
    <br>
    <img style=\"margin: 5px; border: solid 1px; \" src=\"?img$rest\" /><br>
    </body>
    </html>";
    return;
  }
  if (auto rest = queryString.startsWith "img") {
    seed = delegate int() { long l = µsec(); return *int* :&l; }();
    
    parseParams rest;
    
    float offs = randf();
    auto lp = new LoopPool 4;
    gdImagePtr genImage() {
      auto gdp = gdImageCreateTrueColor(size);
      auto start = sec();
      int stepsize = 32768 / size-of (vec2f, vec3f); // L1 size
      int aa2 = aa * aa;
      if (stepsize / aa2 #*aa2 != stepsize) {
        auto newstep = stepsize * aa2; // stepsize needs to be divisible by aa2, which may be npot
        while (newstep > stepsize && newstep & 1)
          newstep /= 2;
        stepsize = newstep;
        if (stepsize / aa2 #*aa2 != stepsize) {
          raise new Error "Huh. ";
        }
      }
      auto totalSteps = size[0] * size[1] * aa2;
      lp.runLoop(totalSteps / stepsize, delegate void(int i, thr) {
        i *= stepsize;
        auto linewidth = size[0] * aa2;
        int y = i / linewidth;
        i -= y * linewidth;
        int x = i / aa2;
        calcSegment(x, y, stepsize, size, aa, tree, \(int x, y, col) { gdp.tpixels[y][size[0] - 1 - x] = col; }, offs, hsv => hsv);
      });
      auto stop = sec();
      // writeln "Time taken: $(float:(stop - start))";
      // auto hdl = fopen ("pretty.png", "w");
      // gdImagePng(gdp, c.gd.FILE*: hdl);
      // fclose hdl;
      return gdp;
    }
    // render and write to stdout
    void streamImage() {
      auto writer = new PNGWriter \(string s) { fwrite(s.ptr, s.length, 1, stdout); };
      writer.configure size;
      
      auto res = new int[] (size[0] * size[1]);
      int next-line;
      auto lines-done = new bool[] size[1];
      auto lock = new Mutex;
      void flush() {
        while (next-line < size[1] && lines-done[next-line]) {
          auto line = next-line;
          auto from = size[0] * line, to = size[0] * $ line + 1;
          auto data = byte[]: res[from .. to];
          writer.writeLine(data);
          writer.flush;
          next-line ++;
        }
      }
      void updateProgress(int line) using autoLock lock {
        lines-done[line] = true;
        flush;
      }
      lp.runLoop(size[1], delegate void(int i, thr) {
        int swap(int i) {
          return ((i & 0x0ff_0000) >> 16) | ((i & 0x0000_00ff) << 16) | (i & 0xff00_ff00);
        }
        calcSegment(0, i, size[0] * aa * aa, size, aa, tree, \(int x, y, col) { res[y * size[0] + (size[0] - 1 - x)] = swap col; }, offs, hsv => hsv);
        updateProgress(i);
      });
      flush;
      writer.end;
    }
    if (gifmode) {
      writeln "Content-type: image/gif";
      writeln "";
      auto file = c.gd.FILE*:stdout;
      auto prev = genImage();
      gdImageGifAnimBegin(prev, file, 1, 0);
      gdImageGifAnimAdd(prev, file, 1, 0, 0, 100/gifmode, gdDisposalNone, gdImagePtr:0);
      for int i <- 1..gifmode {
        delta = i * 1f / gifmode;
        auto img = genImage();
        gdImageGifAnimAdd(img, file, 1, 0, 0, 100/gifmode, 0, prev);
        gdImageDestroy prev;
        prev = img;
      }
      gdImageGifAnimEnd(file);
      gdImageDestroy prev;
    } else {
      writeln "Content-type: image/png";
      writeln "";
      streamImage();
      // gdImagePng(auto gdp = genImage(), c.gd.FILE*:stdout);
      // gdImageDestroy gdp;
    }
    return;
  }
  
  int count = 64;
  auto parts = queryString.split "&";
  for auto part <- parts {
    if (auto rest = part.startsWith "count=") count = rest.atoi();
    else if (auto rest = part.startsWith "v=") version_id = rest.atoi();
    else writeln "Unknown argument: $part";
  }
  queryString = std.fun.select(parts, \(string s)-> !s.startsWith "count=") #.join "&";
  if (!queryString.startsWith "&" && queryString.length) queryString = "&$queryString";
  writeln "Content-type: text/html";
  writeln "";
  string img_gen() {
    char[auto~] res;
    long l = µsec();
    auto seedrng = getPRNG *int*: &l;
    initRNG seedrng.rand();
    int i;
    while (i < count) {
      auto newseed = seedrng.rand();
      tree = null;
      parseParams "seed=$newseed";
      if (tree.getFromDepth(0).length >= 5) {
        string prefix;
        if (version_id) prefix = "&v=$version_id";
        res ~= "<div class=\"gallery_pic\"><a href=\"?picture&seed=$newseed$queryString\"><img width=128 height=128 src=\"?img$prefix&seed=$newseed&size=128\" /></a><br></div>";
        i++;
      }
    }
    return res[];
  }
  string widthstr = "width: $((128+16)*7)px; ";
  if (count > 64) widthstr = null;
  writeln "
  <html>
  <head>
  <title>Picgen</title>
  <style type=\"text/css\">
    .gallery_pic {margin: 4px; float: left; border: 1px solid; }
  </style>
  </head>
  <body>
  Image!<br>
  <div style=\"position: relative; $widthstr\">
  $(img_gen())
  </div>
  </body>
  </html>
  ";
}
