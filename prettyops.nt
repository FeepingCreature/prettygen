module prettyops;

int version_id;

vec2f[][auto~] freelist_vec2;
vec3f[][auto~] freelist_vec3;
int offs_vec2, offs_vec3;

int streamsize;

pragma(linker, "fastroutines.o");

extern(C) float delta;

vec2f[] allocVec2() {
  if (freelist_vec2.length - offs_vec2) {
    return freelist_vec2[offs_vec2++];
  }
  auto res = new vec2f[] (streamsize + 2)#.ptr;
  res = vec2f*:((int:res + 15) & -16); // align
  return res[0..streamsize];
}

vec3f[] allocVec3() {
  if (freelist_vec3.length - offs_vec3) {
    return freelist_vec3[offs_vec3++];
  }
  auto res = new vec3f[] (streamsize + 1)#.ptr;
  res = vec3f*:((int:res + 15) & -16); // align
  return res[0..streamsize];
}

void freeList(vec2f[] array) { freelist_vec2 ~= array; }
void freeList(vec3f[] array) { freelist_vec3 ~= array; }

class Operator {
  Operator[] childs;
  string name;
  void init(int arity, string name) { if arity childs = new Operator[] arity; this.name = name; }
  void process(vec2f[] pos, vec3f[] col) { raise new Error "Unimplemented: Operator::process"; }
  Operator[] getFromDepth(int d) {
    Operator[auto~] res;
    for auto ch <- childs if ch {
      if (d <= 0) res ~= ch;
      using ch.getFromDepth $ d - 1 {
        res ~= that;
        free;
      }
    }
    return res[];
  }
}

import std.random, std.math;
IRandom rng;
int rand() { return rng.rand(); }
float randf() { return std.random.base.randf(rng); }
void initRNG(int seed) { rng = getPRNG seed; }

extern(C) float fabsf(float);

template NullArity(alias A) {
  class NullArity : Operator {
    void init() super.init (0, A[0]);
    void process(vec2f[] poslist, vec3f[] col) {
      for int i <- 0..poslist.length { auto pos = poslist[i]; col[i] = mixin(A[1]); }
    }
  }
}

alias Variable-X = NullArity!("Variable-X", "(*vec3f*: &pos).xxx");
alias Variable-Y = NullArity!("Variable-Y", "(*vec3f*: &pos).yyy");
alias Distance = NullArity!("Distance", "vec3f(pos * pos #.(x+y) - 1)");
alias ManHattan = NullArity!("ManHattan", "vec3f(pos.(fabsf x + fabsf y - 1))");
alias Square = NullArity!("Square", "vec3f(pos.(vec2f(fabsf x, fabsf y)).(1 - 2 * [x, y][eval y > x]))");

extern(C) float fmodf(float f, g);

float wrap(float f) {
  f += 1;
  return f - floorf (f / 2) * 2 - 1;
}

extern(C) void fast_angle(int factor, int count, vec2f* pos, vec3f* col);
class Angle : Operator {
  int factor;
  void init() {
    super.init (0, "Angle");
    factor = rand() % 8 + 1;
  }
  void process(vec2f[] poslist, vec3f[] col) {
    fast_angle(factor, poslist.(length, ptr), col.ptr);
    // for int i <- 0..poslist.length { auto pos = poslist[i]; col[i] = vec3f(wrap(factor * atan2(pos.y, pos.x) / PI + delta * 2)); }
  }
}

alias randrange = 1.1;
float randfrange() { return randrange - randf() * randrange * 2; }

class Matrix : Operator {
  float x 6 parts;
  void init() {
    super.init (0, "Matrix");
    for int i <- 0..6
      parts[i] = randfrange();
  }
  void process(vec2f[] poslist, vec3f[] col) {
    for int i <- 0..poslist.length {
      auto pos = poslist[i];
      col[i] = vec3f(
        parts[0] * pos.x + parts[1] * pos.y,
        parts[2] * pos.x + parts[3] * pos.y,
        parts[4] * pos.x + parts[5] * pos.y
      );
    }
  }
}

extern(C) void fast_posmatrix(float* parts, int count, vec2f* inp, vec2f* outp);
class PosMatrix : Operator {
  float x 6 parts;
  void init() {
    super.init (1, "PosMatrix");
    parts[0] = randrange - randf() * randrange * 2;
    parts[1] = randrange - randf() * randrange * 2;
    parts[2] = 0.5 - randf();
    parts[3] = randrange - randf() * randrange * 2;
    parts[4] = randrange - randf() * randrange * 2;
    parts[5] = 0.5 - randf();
  }
  void process(vec2f[] poslist, vec3f[] col) {
    auto copy = allocVec2();
    
    fast_posmatrix(parts.ptr, poslist.length, poslist.ptr, copy.ptr);
    /*
    for int i <- 0..poslist.length {
      auto pos = poslist[i];
      copy[i] = vec2f(
        parts[0] * pos.x + parts[1] * pos.y + parts[2],
        parts[3] * pos.x + parts[4] * pos.y + parts[5]
      );
    }
    */
    
    childs[0].process (copy, col);
    
    freeList copy;
  }
}

extern(C) void fast_sincos(int count, vec2f* pos, vec3f* col);
class SinCos : Operator {
  void init() {
    super.init (0, "SinCos");
  }
  void process(vec2f[] poslist, vec3f[] col) {
    fast_sincos(poslist.(length, ptr), col.ptr);
    /*
    for int i <- 0..poslist.length {
      auto pos = poslist[i];
      col[i] = vec3f(sin (pos.x + delta * PI2), cos (pos.y + delta * PI2), 0);
    }
    */
  }
}

extern(C) void fast_memcpy(void* to, from, int length);
extern(C) void fast_pow_vec(vec4f* v1, vec4f* v2, vec4f* res);
extern(C) void fast_supersin(float* phase, float* freq, int count, vec3f* col);

class SuperSin : Operator {
  float x 3 phase, freq;
  void init() {
    super.init (1, "SuperSin");
    for int i <- 0..3 {
      phase[i] = randf() * PI;
      freq[i] = randf() * 5 + 1;
    }
  }
  string toString() { return "SuperSin $$childs[0]"; }
  void process(vec2f[] poslist, vec3f[] col) {
    childs[0].process (poslist, col);
    
    fast_supersin(phase.ptr, freq.ptr, col.(length, ptr));
    /*
    for int i <- 0..poslist.length {
      col[i] = vec3f(
        sin (phase[0] + freq[0] * col[i].x),
        sin (phase[1] + freq[1] * col[i].y),
        sin (phase[2] + freq[2] * col[i].z)
      );
    }
    */
  }
}

class ColMatrix : Operator {
  float x 9 parts;
  void init() {
    super.init (1, "ColMatrix");
    for int i <- 0..9
      parts[i] = randrange - randf() * randrange * 2;
  }
  void process(vec2f[] poslist, vec3f[] col) {
    childs[0].process (poslist, col);
    for int i <- 0..poslist.length {
      auto c = col[i];
      col[i] = vec3f(
        parts[0] * c.x + parts[1] * c.y + parts[2] * c.z,
        parts[3] * c.x + parts[4] * c.y + parts[5] * c.z,
        parts[6] * c.x + parts[7] * c.y + parts[8] * c.z
      );
    }
  }
}

class ComplexSquare : Operator {
  void init() {
    super.init (1, "ComplexSquare");
  }
  void process(vec2f[] poslist, vec3f[] col) {
    auto copy = allocVec2();
    
    for int i <- 0..poslist.length {
      auto pos = poslist[i];
      copy[i] = vec2f(pos.x * pos.x - pos.y * pos.y, 2 * pos.x * pos.y);
    }
    
    childs[0].process (copy, col);
    
    freeList copy;
  }
}

class Constant : Operator {
  vec3f value;
  void init() {
    super.init (0, "Constant");
    value = vec3f(randf(), randf(), randf());
  }
  // string toString() return "Constant $value";
  string toString() return "Constant";
  void process(vec2f[] poslist, vec3f[] col) {
    for int i <- 0..col.length col[i] = value;
  }
}

class Sum : Operator {
  void init() super.init (2, "Sum");
  string toString() { return "Sum($$childs[0], $$childs[1])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3();
    
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    
    for int i <- 0..col.length
      col[i] = col[i] + col2[i] #*0.5;
    
    freeList col2;
  }
}

class Product : Operator {
  void init() super.init (2, "Product");
  string toString() { return "Product($$childs[0], $$childs[1])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3();
    
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    
    for int i <- 0..col.length
      col[i] = col[i] * col2[i];
    
    freeList col2;
  }
}

float mymodf(float a, b) {
  if (b == 0) b = 0.0001;
  return fmodf(a, b);
}

class Mod : Operator {
  void init() super.init (2, "Mod");
  string toString() { return "Mod($$childs[0], $$childs[1])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3();
    
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    
    for int i <- 0..col.length
      col[i] = vec3f(mymodf(col[i].x, col2[i].x), mymodf(col[i].y, col2[i].y), mymodf(col[i].z, col2[i].z));
    
    freeList col2;
  }
}

class Well : Operator {
  void init() super.init (1, "Well");
  string toString() { return "Well $$childs[0]"; }
  void process(vec2f[] poslist, vec3f[] col) {
    childs[0].process (poslist, col);
    
    for int i <- 0..poslist.length {
      xmm[4] = col[i];
      xmm[4] = xmm[4] * xmm[4] + vec4f(1);
      xmm[4] *= xmm[4];
      xmm[4] *= xmm[4];
      xmm[4] *= xmm[4];
      
      col[i] = vec3f(1) - vec3f(2) / vec3f:xmm[4];
    }
  }
}

class Tent : Operator {
  void init() super.init (1, "Tent");
  string toString() { return "Tent $$childs[0]"; }
  void process(vec2f[] poslist, vec3f[] col) {
    childs[0].process (poslist, col);
    
    for int i <- 0..poslist.length
      col[i] = vec3f(1) - vec3f(2) * vec3f(fabsf col[i].x, fabsf col[i].y, fabsf col[i].z);
  }
}

extern(C) void fast_sin(float phase, float freq, int count, vec3f* col);
class Sin : Operator {
  float phase, freq;
  void init() {
    super.init (1, "Sin");
    phase = randf() * PI;
    freq = randf() * 5 + 1;
  }
  string toString() { return "Sin $$childs[0]"; }
  void process(vec2f[] poslist, vec3f[] col) {
    childs[0].process (poslist, col);
    
    fast_sin(phase, freq, poslist.length, col.ptr);
    /*
    for int i <- 0..poslist.length {
      auto c = col[i];
      col[i] = vec3f(
        sin (phase + freq * c.x),
        sin (phase + freq * c.y),
        sin (phase + freq * c.z)
      );
    }
    */
  }
}

class Level : Operator {
  float threshold;
  void init() {
    super.init (3, "Level");
    threshold = 1 - randf() * 2;
  }
  string toString() { return "Level($$childs[0], $$childs[1], $$childs[2])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3(), col3 = allocVec3();
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    childs[2].process (poslist, col3);
    
    for int k <- 0..poslist.length {
      auto c0 = &col[k];
      auto c1 = &col2[k];
      auto c2 = &col3[k];
      *c0 = vec3f(
        [c1.x, c2.x][eval c0.x >= threshold],
        [c1.y, c2.y][eval c0.y >= threshold],
        [c1.z, c2.z][eval c0.z >= threshold]
      );
    }
    
    freeList col2;
    freeList col3;
  }
}

class Mix : Operator {
  void init() {
    super.init (3, "Mix");
  }
  string toString() { return "Mix($$childs[0], $$childs[1], $$childs[2])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3(), col3 = allocVec3();
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    childs[2].process (poslist, col3);
    
    for int k <- 0..poslist.length {
      xmm[4] = col[k];
      xmm[4] = vec3f(1) + xmm[4].xxx #*vec3f(0.5);
      xmm[5] = vec3f(1) - vec3f:xmm[4];
      xmm[4] = vec3f:xmm[4] * col2[k];
      xmm[5] = vec3f:xmm[5] * col3[k];
      xmm[4] += xmm[5];
      col[k] = xmm[4];
    }
    
    freeList col2;
    freeList col3;
  }
}

class MixChannels : Operator {
  void init() {
    super.init (3, "MixChannels");
  }
  string toString() { return "MixChannels($$childs[0], $$childs[1], $$childs[2])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto col2 = allocVec3(), col3 = allocVec3();
    childs[0].process (poslist, col);
    childs[1].process (poslist, col2);
    childs[2].process (poslist, col3);
    
    for int k <- 0..poslist.length {
      xmm[4] = col[k];
      xmm[4] = vec3f(1) + vec3f:xmm[4] #*vec3f(0.5); // -1..1 -> 0..1
      xmm[5] = vec3f(1) - vec3f:xmm[4];
      xmm[4] = vec3f:xmm[4] * col2[k];
      xmm[5] = vec3f:xmm[5] * col3[k];
      xmm[4] += xmm[5];
      col[k] = xmm[4];
    }
    
    freeList col2;
    freeList col3;
  }
}

class Reproject : Operator {
  void init() {
    super.init (2, "Reproject");
  }
  string toString() { return "Reproject ($$childs[0], $$childs[1])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto pos2 = allocVec2();
    
    childs[0].process (poslist, col);
    
    for int k <- 0..poslist.length
      pos2[k] = col[k].xy;
    
    childs[1].process (pos2, col);
    
    freeList pos2;
  }
}

class MixProject : Operator {
  vec3f colf1, colf2;
  vec2f posf;
  void init() {
    super.init (2, "MixProject");
    colf1 = vec3f(randfrange() x 3);
    colf2 = vec3f(randfrange() x 3);
    posf = vec2f(randfrange() x 2);
  }
  string toString() { return "MixProject ($colf1, $colf2, $posf) ($$childs[0], $$childs[1])"; }
  void process(vec2f[] poslist, vec3f[] col) {
    auto pos2 = allocVec2();
    
    childs[0].process (poslist, col);
    
    for int k <- 0..poslist.length
      pos2[k] = vec2f(col[k] * colf1 #.sum, col[k] * colf2 #.sum) + poslist[k] * posf;
    
    childs[1].process (pos2, col);
    
    freeList pos2;
  }
}

Operator delegate()[] arity0-ops, ops;

void initOps() {
  arity0-ops ~= delegate Operator() { return new Variable-X; };
  arity0-ops ~= delegate Operator() { return new Variable-Y; };
  arity0-ops ~= delegate Operator() { return new Distance; };
  arity0-ops ~= delegate Operator() { return new Matrix; };
  arity0-ops ~= delegate Operator() { return new Constant; };
  arity0-ops ~= delegate Operator() { return new SinCos; };
  arity0-ops ~= delegate Operator() { return new Angle; };
  arity0-ops ~= delegate Operator() { return new Square; };
  arity0-ops ~= delegate Operator() { return new ManHattan; };
  if (version_id < 2) ops ~= delegate Operator() { return new SuperSin; };
  ops ~= delegate Operator() { return new ColMatrix; };
  ops ~= delegate Operator() { return new PosMatrix; };
  ops ~= delegate Operator() { return new ComplexSquare; };
  ops ~= delegate Operator() { return new Sum; };
  ops ~= delegate Operator() { return new Product; };
  ops ~= delegate Operator() { return new Mod; };
  ops ~= delegate Operator() { return new Well; };
  ops ~= delegate Operator() { return new Tent; };
  ops ~= delegate Operator() { return new Sin; };
  ops ~= delegate Operator() { return new Level; };
  ops ~= delegate Operator() { return new Mix; };
  ops ~= delegate Operator() { return new MixChannels; };
  ops ~= delegate Operator() { return new Reproject; };
  if (version_id >= 1) {
    ops ~= delegate Operator() { return new MixProject; };
  }
}

Operator genRandomBaseOp(int leafmode) {
  if (leafmode == 2) return arity0-ops[rand() % $]();
  if (leafmode == 1) return (ops~arity0-ops)[rand() % $]();
  if (leafmode == 0) return ops[rand() % $]();
}

void genTree(int depthFrom, depthTo, Operator* result, Operator root = null, int depth = 0) {
  if (root && randf() < 1 - (1f / (depth + 1))) { // reuse existing entry
    auto list = root.getFromDepth (depth + rand() % 3);
    if (list.length > rand() % 10) {
      *result = list[rand() % $];
      return;
    }
  }
  if (depthTo <= 0) {
    *result = genRandomBaseOp leafmode=>2;
    return;
  }
  auto res = genRandomBaseOp leafmode=>[0, 1][eval depthFrom <= 0];
  if (!root) root = res;
  *result = res;
  for int i <- 0..res.childs.length
    genTree (depthFrom - 1, depthTo - 1, &res.childs[i], root, depth + 1);
}

Operator genTree(int depthFrom, depthTo) {
  genTree(depthFrom, depthTo, &Operator res);
  return res;
}

Operator mkTree(Operator o1, o2) { o1.childs[0] = o2; return o1; }
Operator mkTree(Operator o1, o2, o3) { o1.childs[0] = o2; o1.childs[1] = o3; return o1; }
Operator mkTree(Operator o1, o2, o3, o4) { o1.childs[0] = o2; o1.childs[1] = o3; o1.childs[2] = o4; return o1; }

vec3f hsv2rgb(vec3f hsv) {
  // alias h = hsv.x;
  alias s = hsv.y;
  alias v = hsv.z;
  if (s == 0) {
    return vec3f(v);
  }
  float chroma = v*s;
  float h = hsv.x * 6;
  float f = h - floor h;
  float p = v * (1 - s);
  float q = v * (1 - s*f);
  float t = v * (1 - s*(1 - f));
  if (h < 1) return vec3f(v, t, p);
  else if (h < 2) return vec3f(q, v, p);
  else if (h < 3) return vec3f(p, v, t);
  else if (h < 4) return vec3f(p, q, v);
  else if (h < 5) return vec3f(t, p, v);
  else return vec3f(v, p, q);
}

vec3f gamma2linear(vec3f v) {
  vec4f exp = vec4f(2.2);
  vec4f lv = v;
  vec4f res = void;
  fast_pow_vec(&lv, &exp, &res);
  return vec3f:res;
}

vec3f linear2gamma(vec3f v) {
  vec4f exp = vec4f(1/2.2);
  vec4f lv = v;
  vec4f res = void;
  fast_pow_vec(&lv, &exp, &res);
  return vec3f:res;
}

import gd, sdl;
void calcSegment(int x, y, distance, width, height, int aa, Operator tree, void delegate(int, int, int) dg, bool hsv, float offs) {
  streamsize = distance;
  auto initialPos = allocVec2();
  auto backup = (x, y);
  int i;
  float inv-halfh = 2f / height;
  float inv-aa = 1f / aa;
  float ratioshift = (width - height) / 2f;
  while (i < distance) {
    for (int y2, int x2) <- cross(0..aa, 0..aa) {
      float fx2 = x2 * inv-aa, fy2 = y2 * inv-aa;
      float fx = x + fx2, fy = y + fy2;
      initialPos[i] = vec2f((fx - ratioshift) * inv-halfh - 1f, fy * inv-halfh - 1f);
      i++;
    }
    if (++x == width) { x = 0; y++; }
  }
  auto colResult = allocVec3();
  tree.process (initialPos, colResult);
  (x, y) = backup;
  i = 0;
  while (i < distance) {
    vec3f sum = vec3f(0);
    float bound(float low, high, v) {
      if (v < low) return low;
      if (v > high) return high;
      return v;
    }
    for (int y2, int x2) <- cross(0..aa, 0..aa) {
      vec3f res = colResult[i] * vec3f(0.5) + vec3f(0.5);
      // bound before AA!
      float maxf(float a, b) return [a,b][eval b > a];
      float m = maxf(res.x, maxf(res.y, res.z));
      if (m > 1) res /= m;
      res.x = bound(0, 1, res.x);
      res.y = bound(0, 1, res.y);
      res.z = bound(0, 1, res.z);
      sum += gamma2linear res; // blend in correct space
      i++;
    }
    sum /= vec3f(aa*aa);
    // auto col = linear2gamma sum;
    auto col = sum;
    if (hsv) col = hsv2rgb col;
    dg(x, y, floatToIntColor col);
    if (++x == width) { x = 0; y++; }
  }
  
  freeList initialPos;
  freeList colResult;
}
